plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}
tasks.named('wrapper', Wrapper).configure { distributionType = Wrapper.DistributionType.BIN }
version = mod_version
group = mod_group_id
repositories { mavenLocal() }
base { archivesName = mod_id + "-" + minecraft_version }
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
        jvmArgument '-Xcheck:jni'
    }
    client { systemProperty 'forge.enabledGameTestNamespaces', project.mod_id }
    server { systemProperty 'forge.enabledGameTestNamespaces', project.mod_id; programArgument '--nogui' }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations { runtimeClasspath.extendsFrom localRuntime }
dependencies { implementation "net.neoforged:neoforge:${neo_version}" }
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neo_version            : neo_version,
        neo_version_range      : neo_version_range,
        loader_version_range   : loader_version_range,
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_license            : mod_license,
        mod_version            : mod_version,
        mod_authors            : mod_authors,
        mod_description        : mod_description,
        gtceu_version          : gtceu_version
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml']) { expand replaceProperties }
}
tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
idea { module { downloadSources = true; downloadJavadoc = true } }
